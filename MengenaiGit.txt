Git init -> Untuk menajadikan atau membuat repo kita secara      
            otomatis dibuat , dan punya brain master
ls -> adalah melist ada file apa saja   
Git status -> untuk memberitahukan ada git apa saja yang belum di 
            Commit
Git add (nama file) -> Untuk menambahkan file yang belum di masukkan
                        Ke staging area
Git add . -> Untuk membuat semuanya ke staging area tanpa terkecuali                              
Git rm --chached (nama file) --> Mengeluarkan dari staging area 
        Ctt: Sebelum di commit harus di masukkan dahulu ke staging area Untuk
            Menjadikannya sebagai folder git bukan cuma folder biasa ,
            jika sudah di commit maka dia akan keluar dari staging area (tidak ada),
            setiap kali commit maka head (branch aktif akan di commit terbaru)
Git commit -> 1. nama nya siapa 
              2. tgl commit 
              3. hash 
              4. Pesan commit
              5. Emailnya siapa 
Sebelum di Git Commit harus di isi dulu ke 4 di atas
        Isi ke 2 hal ini jika ingin git commit 
! 1. git config --global user.name "becakdaruratt"
! 2. git config --global user.email "pwdarurat@gmail.com"
Git commit -m (Pesan tak perlu tulis) "menambahkan file index.html" -> memberi pesan commit
git commit -> maka akan di buatkan pesan default commitnya 
Git commit -a -m "menabamkan file index.htm" (bisa langsung di commit tanpa
        harus di masukkan ke staging area dulu )
Head -> menunjukkan Branch mana yang aktif        
Git log -> Untuk melihat history perubahan yang dilakukan
Git log -3 -> untuk melihat history commit 3 terakhir 
Git log -- style.css -> Mencari history commit style.css ada berapa commit
Git checkout (5 digit nama commit hash yang ingin dikembalikan filenya) -- (nama filenya) -> untuk menembalikan file yang sudha di hapus atau ke commit sebelumnya  dan file yang sudah di kembalikan akan masuk ke stagin area (harus dicommit lagi) dan filenya muncul kembali 


 warna Hijau itu adalah yang berubah pada branch yang aktif atau +
 warnah biru itu adalah data yang berubah di branch yang mau kita gabungkan +
 tinggal kita pilih mau pakai data yang mana , yang atas atau yang bawah itu boleh juga tinggal pilih , kalau sudah tinggal di save 

-         U -> aritnya git nya belum berada di staging area (untreak)
-        M -> Modified
-        git branch -> Menampilkan ada branch apa saja
-        git branch (nama branch - tapi branch harus di master dulu) -> untuk melakukan branch baru
-        * -> artinya branch yang aktif
-        git log --all --decorate --oneline --graph -> Menampilkan visualisasi dari insigth 
        network git (secara visual urutannya)
-        alias graph="" -> untuk membuat nama lain dari tulisan git yang panjangan atau di singkat      
Git checkout (nama file branch) -> untuk memindahkan branch yang aktif
=======
U -> aritnya git nya belum berada di staging area (untreak)
M -> Modified
git checkout (nama file) -> berpindah commit
>>>>>>> dosen

git branch -d (nama branch) -> cara menghapus branch
git branch --merged -> untuk tau branch mana yang di merge
git branch -D -> Untuk menghapus branch 
Three-way Merge -> menggabungkan branch yang berlawanan 

        Jenis Merge 
  * Fast Forward  -> jalur langsung di satu jalan

  (git merge (nama branch))  -dari branch ke master
  * Three-way Merge 
Three-way Merge -> menggabungkan branch yang berlawanan 
- dari master ke branch



        dan kalau kita graph , head atau branch yang aktifnya skarang adalah master 
dan skarang kita akan melakukan perubhaan pada master, setelah di branch safety tadi kita melakukan perubahan , dan di master juga sama kita akan ganti isi di branch master di h3 nya jadi h4 , di branch safety h1 , dan di master bukan h1 tapi h4 , jadi lebih kecil dari h1 , coba lihat baris yang sama berubah nya beda , jadi ini tidak bisa nanti di lakukan merge , dan di master nya kita akan hapus , li sandikanya , jadi di master data sandikanya nya hilang , jadi istilahnya ada data yang di ubah pada baris yang sama , dan ada data yang di hapus , dan terakhir kita akan coba tambhakan <p>coba paragraf</p>, jadi tiga perubahan nya dilakukan di baris yang sama tapi berbeda jadi ketika di merge kita harus manual untuk resaultnya
, dan sekarang ini kita akan coba commit dahulu , ingat sebelum di commit masukkan dahuluke stagin area , ini adalah branch Three-way Merge yaitu menggabungkan cabang , jadi nanti kita akan melakukan cabang  
=======
  (git merge (nama branch))  -> cara merge commit
  * Three-way Merge 






                        - CATATAN GIT -
kita kana membahas mengenai merge, dan apa bedanya dengan vidio sebelumnya bahasa merge itu tanpa ada konflik jadi mergenya baik baik saja jadi otomatis bisa di lakukan oleh git dan nanti kedepannya kemungkinan besar merge yang kita buat itu mengalami konflik dan namanya git merge conflict ,kenapa terjadi merge conflict , karena 2 branch mengerjakan file yang sama dalam satu repo dan itu secara otomatis gitnya tidak bisa melakukan merge itu harus kita resault atau kita selesaikan secara manual , jadi kita memilih yang mau kita ambil atau yang ingin kita pilih itu script yang mana script yang di branch a atau script yang di branch b dan ini sebenarnya sudah kita coba waktu kita belajar mengenai github (pull request ke pemilik reponya) dan sekarang akan kita implementasikan di git kita local ,dan kita akan coba buat study kasus dari git yang sudah kita buat sebelumnya ,dari vidio sebelumnya kita sudah memiliki sebuah folder yang sudah kita jadikan repo git yang namanya Folder-GIT yang di dalamnya ada beberapa file , yang mana ini adalah hasil dan kita melakukan merge dari 2 buah branch , yang mana satu satu kita merge kedalam branch kita , jadi sekali lagi file contoh kasusnya tidak releval dengan git dan kita bisa menggunakan file untuk bahasa programman apapun dan seperti yang kita tau kita sudah belajar file html , jika kita buka file folder Folder-GIT kita , kita bisa lihat kita sudah brada di branch - master , dan kalau kita git branch , file yang tersisa hanya tinggal master karena kita sudah menghapus 2 buah branch sebelumnya , dan sekarang untuk mencoba merge conflict kita harus membuat branch dulu , untuk membuat sebuah branch kita tinggal ketik , git branch (nama branchnya) , setelah kita membuat sebuah branch kita , lihat branch yang aktif adalah branch master , dan sekarang kita ingin berpindah branch , maka kita tinggal ketik , branch checkout (nama branchnya) , kalau kita menggunakan visual studio code , kita bisa lihat kiri bawah , ada branch yang aktif yang di tunjukkan , dan misalnya di branch safety ini kita ingin mengubah beberapa hal di file.Mahasiswa.html , misalkan kita mengganti beberapa huruf di file mahasiswa , dan kita menambahkan 1 perubahan di file Mahasiswa nya , dan kalau kita lihat di samping filenya , ada M -  yang artinya modified atau berubah, harus kita simpan dulu ke stagin area atau kita simpan dulu (save) , jadi kita harus simpan dulu filenya ke stagin area , boleh dengan git add (nama filenya) , atau git add . , menambahkan semua file yang berubah , atau kita juga bisa lagsung melakukan commit , dengan cara , git commit -a -m "nama commit" , atau bisa juga git commit -am "nama pesan commitnya", dan setelah ktia commit lagi , dan kita cek git status , sudah tidak ada perubahan file di staging areanya , atau tidak ada lagi yang harus di masukan di staging area .. kalau kita lihat dengan graph, jadi alias itu berlaku hanya satu sesi saja , kita bisa lihat viasualnya , kita bisa lihat pointernya mengarah pada safety (branch yang aktif) , di branch safety ada perubahan file Mahasiswa , dan sekarang kita akan kembali aktifkan branch master , kalau kita lihat git status , kita berada di tengah tengah merge , jadi mergenya belum beres , karena kita sudah selesai melakukan resault  udah di pilih mau yang mana , kita harus simpan dulu file yang sudah di modifikasinya ke stagin area 



