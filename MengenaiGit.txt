Git init -> Untuk menajadikan atau membuat repo kita secara      
            otomatis dibuat , dan punya brain master
ls -> adalah melist ada file apa saja   
Git status -> untuk memberitahukan ada git apa saja yang belum di 
            Commit
Git add (nama file) -> Untuk menambahkan file yang belum di masukkan
                        Ke staging area
Git add . -> Untuk membuat semuanya ke staging area tanpa terkecuali                              
Git rm --chached (nama file) --> Mengeluarkan dari staging area 
        Ctt: Sebelum di commit harus di masukkan dahulu ke staging area Untuk
            Menjadikannya sebagai folder git bukan cuma folder biasa ,
            jika sudah di commit maka dia akan keluar dari staging area (tidak ada),
            setiap kali commit maka head (branch aktif akan di commit terbaru)
Git commit -> 1. nama nya siapa 
              2. tgl commit 
              3. hash 
              4. Pesan commit
              5. Emailnya siapa 
Sebelum di Git Commit harus di isi dulu ke 4 di atas
        Isi ke 2 hal ini jika ingin git commit 
! 1. git config --global user.name "becakdaruratt"
! 2. git config --global user.email "pwdarurat@gmail.com"
Git commit -m (Pesan tak perlu tulis) "menambahkan file index.html" -> memberi pesan commit
Git commit -a -m "menabamkan file index.htm" (bisa langsung di commit tanpa
        harus di masukkan ke staging area dulu )
Head -> menunjukkan Branch mana yang aktif        
Git log -> Untuk melihat history perubahan yang dilakukan
Git log -3 -> untuk melihat history commit 3 terakhir 
Git log -- style.css -> Mencari history commit style.css ada berapa commit
Git checkout (5 digit nama commit hash yang ingin dikembalikan filenya) -- (nama filenya) -> untuk menembalikan file yang sudha di hapus atau ke commit sebelumnya  dan file yang sudah di kembalikan akan masuk ke stagin area (harus dicommit lagi) dan filenya muncul kembali 
<<<<<<< HEAD
-         U -> aritnya git nya belum berada di staging area (untreak)
-        M -> Modified
-        git branch -> Menampilkan ada branch apa saja
-        git branch (nama branch - tapi branch harus di master dulu) -> untuk melakukan branch baru
-        * -> artinya branch yang aktif
-        git log --all --decorate --oneline --graph -> Menampilkan visualisasi dari insigth 
        network git (secara visual urutannya)
-        alias graph="" -> untuk membuat nama lain dari tulisan git yang panjangan atau di singkat      
Git checkout (nama file branch) -> untuk memindahkan branch yang aktif
=======
U -> aritnya git nya belum berada di staging area (untreak)
M -> Modified
git checkout (nama file) -> berpindah commit
>>>>>>> dosen

git branch -d (nama branch) -> cara menghapus branch
git branch --merged -> untuk tau branch mana yang di merge
git branch -D -> Untuk menghapus branch 
Three-way Merge -> menggabungkan branch yang berlawanan 

        Jenis Merge 
  * Fast Forward  -> jalur langsung di satu jalan
  (git merge (nama branch))  
  * Three-way Merge 



        dan kalau kita graph , head atau branch yang aktifnya skarang adalah master 
dan skarang kita akan melakukan perubhaan pada master, setelah di branch safety tadi kita melakukan perubahan , dan di master juga sama kita akan ganti isi di branch master di h3 nya jadi h4 , di branch safety h1 , dan di master bukan h1 tapi h4 , jadi lebih kecil dari h1 , coba lihat baris yang sama berubah nya beda , jadi ini tidak bisa nanti di lakukan merge , dan di master nya kita akan hapus , li sandikanya , jadi di master data sandikanya nya hilang , jadi istilahnya ada data yang di ubah pada baris yang sama , dan ada data yang di hapus , dan terakhir kita akan coba tambhakan <p>coba paragraf</p>, jadi tiga perubahan nya dilakukan di baris yang sama tapi berbeda jadi ketika di merge kita harus manual untuk resaultnya
, dan sekarang ini kita akan coba commit dahulu , ingat sebelum di commit masukkan dahuluke stagin area 